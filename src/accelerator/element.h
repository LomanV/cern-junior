#pragma once

#include <vector>
#include <cmath>
#include <memory> // for unique_ptr

#include "../general/drawable.h"
#include "../misc/exceptions.h"

#include "../physics/particle.h"

class Element : public Drawable{
	protected:
		Vector3D entry_point; // entry position
		Vector3D exit_point; // exit position

		double radius; // radius of the vaccum chamber
		double curvature; // radial curvature (potentially zero)

		Element* successor = nullptr; // points to the following element

		std::vector<std::unique_ptr<Particle>> particle_list; // list of particles contained inside

		bool is_straight(void) const;

		std::shared_ptr<double> clock;

	public:
		Element(Canvas* display, const Vector3D& entry, const Vector3D& exit, double my_radius, double my_curvature, double& my_clock) :
			Drawable(display),
			entry_point(entry),
			exit_point(exit),
			radius(my_radius),
			curvature(my_curvature),
			clock(std::shared_ptr<double>(&my_clock))
		{}

		void setCanvas(Canvas* c){ canvas = c; }

		virtual ~Element(void){}

		virtual std::ostream& print(std::ostream& output) const;
		// Base method prints only basic information (i.e. about its shape)
		// Subclass overrides will add additional information e.g. type of the element, electric/magnetic fields, other parameters...
		
		void link(Element &next_element);

		void insert(Particle &p);

		Vector3D center(void) const; // returns the center of circular element assuming curvature is non-zero

		Vector3D direction(void) const; // returns the vector exit_point - entry_point
		Vector3D unit_direction(void) const; // returns director().unitary()

		Vector3D relative_coords(const Vector3D &x) const;
		Vector3D local_coords(const Vector3D &x) const;

		double curvilinear_coord(const Vector3D &x) const;

		std::vector<Vector3D> sample_points(void) const;

		bool has_collided(const Particle& p) const; // returns true iff p has collided with the element's edge
		bool has_left(const Particle& p) const; // returns true iff p has passed to the next element
		
		virtual void add_lorentz_force(Particle &p, double dt) const{ return; } // does nothing by default
		virtual void evolve(double dt) override;
}; 

std::ostream& operator<<(std::ostream& output, const Element &E);

class StraightSection : public Element{
	public:
		StraightSection(Canvas* display, const Vector3D& entry, const Vector3D& exit, double my_radius, double &time) :
			Element(display, entry, exit, my_radius,0.0,time)
		{}
		virtual ~StraightSection(void) override{}

		virtual std::ostream& print(std::ostream& output) const override;
		virtual void draw(void) override{ canvas->draw(*this); }

		virtual void add_lorentz_force(Particle& p, double dt) const override{ return; } // no electromagnetic interaction
};

class Electric_element : public Element{
	public:
		using Element::Element;
		virtual ~Electric_element(void) override{}
		virtual void add_lorentz_force(Particle& p, double dt) const override;
		virtual Vector3D E(const Vector3D &x, double t = 0.0) const = 0;
};

class Magnetic_element : public Element{
	public:
		using Element::Element;
		virtual ~Magnetic_element(void) override{}
		virtual void add_lorentz_force(Particle& p, double dt) const override;
		virtual Vector3D B(const Vector3D &x, double t = 0.0) const = 0;
};

class Dipole : public Magnetic_element{
	private:
		double B_0; // constant amplitude of the magnetic field generated by the dipole
	public:
		virtual std::ostream& print(std::ostream& output) const override;

		Dipole(Canvas* display, const Vector3D& entry, const Vector3D& exit, double my_radius, double my_curvature, double &my_clock, double my_B_0) :
			Magnetic_element(display, entry, exit, my_radius, my_curvature, my_clock), B_0(my_B_0) {}

		virtual void draw(void) override{ canvas->draw(*this); }

		virtual Vector3D B(const Vector3D &x, double dt) const override;
};

class Quadrupole : public Magnetic_element{
	private:
		double b; // parameter of the quadrupole
	public:
		virtual Vector3D B(const Vector3D &x, double dt) const override;
		virtual std::ostream& print(std::ostream& output) const override;

		Quadrupole(Canvas* display, const Vector3D& entry, const Vector3D& exit, double my_radius, double my_curvature, double &my_clock, double my_b) :
			Magnetic_element(display, entry, exit, my_radius, my_curvature, my_clock), b(my_b){}

		virtual void draw(void) override{ canvas->draw(*this); }
};

class RadiofrequencyCavity : public Electric_element{
	private:
		double E_0;
		double omega;
		double kappa;
		double phi;
	public:
		virtual Vector3D E(const Vector3D &x, double dt) const override;
		virtual std::ostream& print(std::ostream& output) const override;

		RadiofrequencyCavity(Canvas* display, const Vector3D& entry, const Vector3D& exit, double my_radius, double my_curvature, double &my_clock, double my_E_0, double my_omega, double my_kappa, double my_phi) :
			Electric_element(display, entry, exit, my_radius, my_curvature, my_clock),
			E_0(my_E_0),
			omega(my_omega),
			kappa(my_kappa),
			phi(my_phi)
			{}

		virtual void evolve(double dt) override{ Element::evolve(dt); }

		virtual void draw(void) override{ canvas->draw(*this); }
};
